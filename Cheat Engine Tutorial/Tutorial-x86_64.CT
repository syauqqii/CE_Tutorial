<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="45">
  <CheatEntries>
    <CheatEntry>
      <ID>43902</ID>
      <Description>"Aktifkan Table"</Description>
      <Options moHideChildren="1" moManualExpandCollapse="1"/>
      <LastState/>
      <Color>40FF00</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{$LUA}
  if syntaxcheck then return end

  [ENABLE]



  local al = getAddressList()
  local pl = getProcessList()
  local gameName = 'Cheat Engine Tutorial'
  local gameProc = 'Tutorial-x86_64.exe'

  if pl[getProcessIDFromProcessName(gameProc)] ~= nil then

    if (readInteger(process) == nil) or (readInteger(process) ~= readInteger(gameProc)) then
      openProcess(gameProc)
      --if not monopipe then LaunchMonoDataCollector() end
    else
        --if not monopipe then
          -- LaunchMonoDataCollector()
        --end
        --return
    end

  else beep()
    error(showMessage(("%s (%s) belum dibuka.\nBuka Aplikasi tersebut terlebih dahulu."):format(gameName,gameProc)))

  end

  [DISABLE]

  --if monopipe then monopipe.destroy();monopipe=nil end
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>3</ID>
          <Description>"[STEP 2] Set Healt 1000"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : Cheat Engine Tutorial v3.4
  Version: 
  Date   : 2024-01-08
  Author : @syauqqii
}

[ENABLE]

aobscanmodule(INJECT,Tutorial-x86_64.exe,29 83 F8 07 00 00)
alloc(newmem,$1000,INJECT)

label(code)
label(return)

newmem:

code:
  mov [rbx+000007F8],(int)1000
  jmp return

INJECT:
  jmp newmem
  nop
return:
registersymbol(INJECT)

[DISABLE]

INJECT:
  db 29 83 F8 07 00 00

unregistersymbol(INJECT)
dealloc(newmem)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>5</ID>
          <Description>"[STEP 3] Set Health 5000"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : Cheat Engine Tutorial v3.4
  Version: 
  Date   : 2024-01-08
  Author : @syauqqii
}

[ENABLE]

aobscanmodule(INJECT,Tutorial-x86_64.exe,29 9E F8 07 00 00)
alloc(newmem,$1000,INJECT)

label(code)
label(return)

newmem:

code:
  mov [rsi+000007F8],(int)5000
  jmp return

INJECT:
  jmp newmem
  nop
return:
registersymbol(INJECT)

[DISABLE]

INJECT:
  db 29 9E F8 07 00 00

unregistersymbol(INJECT)
dealloc(newmem)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>11</ID>
          <Description>"[STEP 4] Healt + Ammo 5000"</Description>
          <Options moHideChildren="1" moManualExpandCollapse="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
          <LastState Value="" RealAddress="00000000"/>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>8</ID>
              <Description>"[STEP 4] Set Float Health 5000"</Description>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : Tutorial-x86_64
  Version: 
  Date   : 2024-01-08
  Author : @syauqqii
}

[ENABLE]

aobscanmodule(SetHealth,Tutorial-x86_64.exe,F3 0F 11 8E 18 08 00 00)
alloc(newmem,$1000,SetHealth)
alloc(floatHealt,4)

label(return)

floatHealt:
  dd (float)5000

newmem:
  fld dword ptr [floatHealt]
  fstp dword ptr [rsi+00000818]
  jmp return

SetHealth:
  jmp newmem
  nop 3
return:
registersymbol(SetHealth)

[DISABLE]

SetHealth:
  db F3 0F 11 8E 18 08 00 00

unregistersymbol(SetHealth)
dealloc(newmem)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>10</ID>
              <Description>"[STEP 4] Set Double Ammo 5000"</Description>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : Tutorial-x86_64
  Version: 
  Date   : 2024-01-08
  Author : @syauqqii
}

[ENABLE]

aobscanmodule(SetAmmo,Tutorial-x86_64.exe,F2 0F 11 83 20 08 00 00)
alloc(newmem,$1000,SetAmmo)
alloc(doubleAmmo,4)

label(return)

doubleAmmo:
  dq (double)5000

newmem:
  fld qword ptr [doubleAmmo]
  fstp qword ptr [rbx+00000820]
  jmp return

SetAmmo:
  jmp newmem
  nop 3
return:
registersymbol(SetAmmo)

[DISABLE]
SetAmmo:
  db F2 0F 11 83 20 08 00 00

unregistersymbol(SetAmmo)
dealloc(newmem)
</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>1</ID>
          <Description>"[STEP 5] Unlimited Health"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

alloc(newmem,2048,"Tutorial-x86_64.exe"+2CB88) 
label(returnhere)
label(exit)

newmem:

exit:
jmp returnhere

"Tutorial-x86_64.exe"+2CB88:
db 90 90
returnhere:

 
[DISABLE]

dealloc(newmem)
"Tutorial-x86_64.exe"+2CB88:
db 89 10 48 8B 45 F0
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>15</ID>
          <Description>"[STEP 6] Set P.Value 5000"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>4 Bytes</VariableType>
          <Address>"Tutorial-x86_64.exe"+325AD0</Address>
          <Offsets>
            <Offset>0</Offset>
          </Offsets>
          <Hotkeys>
            <Hotkey Active="0">
              <Action>Toggle Activation</Action>
              <Keys/>
              <Value>5000</Value>
              <ID>0</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>17</ID>
          <Description>"[STEP 7] Increment Value to 2"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
alloc(newmem,2048,"Tutorial-x86_64.exe"+2DB57) 
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
add dword ptr [rsi+000007E0],02

exit:
jmp returnhere

"Tutorial-x86_64.exe"+2DB57:
jmp newmem
nop 2
returnhere:


 
[DISABLE]
dealloc(newmem)
"Tutorial-x86_64.exe"+2DB57:
db 83 AE E0 07 00 00 01
//sub dword ptr [rsi+000007E0],01

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>18</ID>
          <Description>"[STEP 8] Freeze Value 5000"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>4 Bytes</VariableType>
          <Address>"Tutorial-x86_64.exe"+325B00</Address>
          <Offsets>
            <Offset>18</Offset>
            <Offset>0</Offset>
            <Offset>18</Offset>
            <Offset>10</Offset>
          </Offsets>
          <Hotkeys>
            <Hotkey>
              <Action>Toggle Activation</Action>
              <Keys/>
              <Value>5000</Value>
              <ID>0</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>20</ID>
          <Description>"[STEP 9] God Mode Team"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
alloc(newmem,2048,"Tutorial-x86_64.exe"+2F25D) 
label(returnhere)
label(originalcode)
label(exit)

newmem:
cmp [rcx+14],1
je exit // --&gt; untuk team sendiri supaya god mode
// jmp exit // --&gt; untuk team musuh supaya god mode

originalcode:
movss [rbx+08],xmm0

exit:
jmp returnhere

"Tutorial-x86_64.exe"+2F25D:
jmp newmem
returnhere:

 
 
[DISABLE]
dealloc(newmem)
"Tutorial-x86_64.exe"+2F25D:
db F3 0F 11 43 08
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <CheatCodes>
    <CodeEntry>
      <Description>Change of mov [rax],edx</Description>
      <AddressString>Tutorial-x86_64.exe+2CB88</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>8B</Byte>
        <Byte>55</Byte>
        <Byte>E8</Byte>
      </Before>
      <Actual>
        <Byte>89</Byte>
        <Byte>10</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>45</Byte>
        <Byte>F0</Byte>
        <Byte>48</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov ecx,[rbx+000007F8]</Description>
      <AddressString>Tutorial-x86_64.exe+2B4CB</AddressString>
      <Before>
        <Byte>E8</Byte>
        <Byte>45</Byte>
        <Byte>DA</Byte>
        <Byte>FD</Byte>
        <Byte>FF</Byte>
      </Before>
      <Actual>
        <Byte>8B</Byte>
        <Byte>8B</Byte>
        <Byte>F8</Byte>
        <Byte>07</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>41</Byte>
        <Byte>B9</Byte>
        <Byte>FF</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of sub [rbx+000007F8],eax</Description>
      <AddressString>Tutorial-x86_64.exe+2B4BC</AddressString>
      <Before>
        <Byte>FE</Byte>
        <Byte>FF</Byte>
        <Byte>83</Byte>
        <Byte>C0</Byte>
        <Byte>01</Byte>
      </Before>
      <Actual>
        <Byte>29</Byte>
        <Byte>83</Byte>
        <Byte>F8</Byte>
        <Byte>07</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8D</Byte>
        <Byte>4D</Byte>
        <Byte>F8</Byte>
        <Byte>E8</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of add eax,01</Description>
      <AddressString>Tutorial-x86_64.exe+2B4B9</AddressString>
      <Before>
        <Byte>E8</Byte>
        <Byte>57</Byte>
        <Byte>47</Byte>
        <Byte>FE</Byte>
        <Byte>FF</Byte>
      </Before>
      <Actual>
        <Byte>83</Byte>
        <Byte>C0</Byte>
        <Byte>01</Byte>
      </Actual>
      <After>
        <Byte>29</Byte>
        <Byte>83</Byte>
        <Byte>F8</Byte>
        <Byte>07</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of movss [rsi+00000818],xmm1</Description>
      <AddressString>Tutorial-x86_64.exe+2C824</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>5C</Byte>
        <Byte>C8</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>8E</Byte>
        <Byte>18</Byte>
        <Byte>08</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>C7</Byte>
        <Byte>44</Byte>
        <Byte>24</Byte>
        <Byte>20</Byte>
        <Byte>04</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov [rbx],rax</Description>
      <AddressString>Tutorial-x86_64.exe+10782</AddressString>
      <Before>
        <Byte>15</Byte>
        <Byte>C6</Byte>
        <Byte>9B</Byte>
        <Byte>1A</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>48</Byte>
        <Byte>89</Byte>
        <Byte>03</Byte>
      </Actual>
      <After>
        <Byte>90</Byte>
        <Byte>48</Byte>
        <Byte>8D</Byte>
        <Byte>64</Byte>
        <Byte>24</Byte>
      </After>
    </CodeEntry>
  </CheatCodes>
  <UserdefinedSymbols/>
</CheatTable>
